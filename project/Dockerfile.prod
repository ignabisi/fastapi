# pull official base image
FROM python:3.11.2-slim-buster

# create a directory for the app user
RUN mkdir -p /home/app

# create the app (non-root) user and assign to a group
RUN addgroup --system app && adduser --system --group app

# Set home directory for our app and create necessary directory structure
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME  # Set working directory to APP_HOME

# Set various environment variables:
# - PYTHONDONTWRITEBYTECODE: prevent Python from writing pyc files to disk (useful in some production scenarios)
# - PYTHONUNBUFFERED: don't allow Python to buffer stdout & stderr (useful for logging)
# - ENVIRONMENT: specify the running environment as production
# - TESTING: disable testing mode
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV ENVIRONMENT prod
ENV TESTING 0

# install essential system dependencies
RUN apt-get update \
    && apt-get -y install netcat gcc postgresql \
    && apt-get clean

# Upgrade pip, then copy and install python dependencies from requirements
RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt
# Install specific version of uvicorn for our application server
RUN pip install "uvicorn[standard]==0.21.1"

# Copy the rest of the application code to the container
COPY . .

# Assign ownership of all files to the 'app' user and group
RUN chown -R app:app $APP_HOME

# Switch to the 'app' user for subsequent commands
USER app

# Command to run when container starts: launch our application using gunicorn and uvicorn worker
# $PORT environment variable is supplied by Heroku.
CMD gunicorn --bind 0.0.0.0:$PORT app.main:app -k uvicorn.workers.UvicornWorker
